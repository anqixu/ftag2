#!/usr/bin/env python
PACKAGE = "ftag2"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("quadFastDetector", bool_t, 0, "If true, detect quads via contours; otherwise, detect quads by scanning for line segments", False)
gen.add("quadRefineCorners", bool_t, 0, "Identify sub-pixel location of corners", True)
gen.add("quadMaxScans", int_t, 0, "Maximum number of largest quads to scan for tags", 10, 1, 100)

gen.add("tagMaxStripAvgDiff", double_t, 0, "Maximum strip (row / col) grayscale average difference, for trimming the white sides of extracted tag quads", 15.0, 0.0, 30.0)
gen.add("tagBorderMeanMaxThresh", double_t, 0, "Maximum acceptable value for mean of grayscale pixel values in each marker's border", 80.0, 0.0, 255.0)
gen.add("tagBorderStdMaxThresh", double_t, 0, "Maximum acceptable value for standard deviation of grayscale pixel values in each marker's border", 30.0, 0.0, 255.0)

gen.add("phaseVarWeightR", double_t, 0, "Weight for phase variance predictor: XY radius from center of camera (m)", 0, 0, 180*180)
gen.add("phaseVarWeightZ", double_t, 0, "Weight for phase variance predictor: Z distance from center of camera (m)", 0, 0, 180*180)
gen.add("phaseVarWeightAngle", double_t, 0, "Weight for phase variance predictor: angle between tag's normal and camera's ray (deg)", 0, 0, 180*180)
gen.add("phaseVarWeightFreq", double_t, 0, "Weight for phase variance predictor: frequency of encoded phase", 0, 0, 180*180)
gen.add("phaseVarWeightBias", double_t, 0, "Weight for phase variance predictor: constant bias", 10*10, 0, 180*180)

gen.add("markerWidthM", double_t, 0, "Physical width (m) of physical markers", 0.07, 0.0001, 100.0)

gen.add("tempTagDecodeStd", double_t, 0, "# of Stdev away from mean needed to accept a decoded phase", 3.0, 0.01, 10.0)

exit(gen.generate(PACKAGE, "ftag2", "FTag2Reader"))
