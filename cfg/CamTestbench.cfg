#!/usr/bin/env python
PACKAGE = "ftag2"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("sobelThreshHigh", int_t, 0, "Upper threshold for Sobel operator's hysteresis thresholding", 100, 0, 255)
gen.add("sobelThreshLow", int_t, 0, "Lower threshold for Sobel operator's hysteresis thresholding", 30, 0, 255)

blur_width_enum = gen.enum([
  gen.const("3", int_t, 3, "3"),
  gen.const("5", int_t, 5, "5")],
  "sobelBlurWidth")
gen.add("sobelBlurWidth", int_t, 0, "Gaussian blur width prior to running Sobel operator", 3, edit_method=blur_width_enum)
  
gen.add("lineAngleMargin", double_t, 0, "Half of maximum angular range for grouping edgels based on their gradient direction", 20.0, 0.01, 360.0) # * degree
gen.add("lineMinEdgelsCC", int_t, 0, "Minimum number of edgels in each connected component, for filtering out small components", 50, 0, 200)
gen.add("lineMinEdgelsSeg", int_t, 0, "Minimum number of edgels in each line segment, for filtering out short segments", 10, 0, 200)

gen.add("quadMinWidth", int_t, 0, "Minimum width of a FTag2 marker", 15, 15, 50)
gen.add("quadMinAngleIntercept", double_t, 0, "Minimum angle between 2 line segments for grouping, for filtering out sharp corners", 30.0, 0.0, 90.0) # * degree
gen.add("quadMaxTIntDistRatio", double_t, 0, "To prevent T-shaped junctions, intersecting line segments are rejected if intersecting point lies at [quadMaxTIntDistRatio, 1-quadMaxTIntDistRatio] range of either segment", 0.05, 0.0, 0.5)
gen.add("quadMaxEndptDistRatio", double_t, 0, "Maximum (gap length)/(gap + segment lengths) ratio between 2 line segments for grouping", 0.1, 0.0, 1.0)
gen.add("quadMaxCornerGapEndptDistRatio", double_t, 0, "Like quadMaxEndptDist, but for detecting single-corner-obstructed quads", 0.2, 0.0, 1.0)
gen.add("quadMaxEdgeGapDistRatio", double_t, 0, "Maximum (gap length)/(gap + 2nd side segments lengths) ratio, for detecting single-edge-obstructed quads", 0.5, 0.0, 1.0)
gen.add("quadMaxEdgeGapAlignAngle", double_t, 0, "Maximum angular threshold for a single-edge-obstructed quad, for the angles between each of the 2 end segments, against the obstructed edge segment", 10.0, 0.0, 90.0)
gen.add("quadMaxStripAvgDiff", double_t, 0, "Maximum strip (row / col) grayscale average difference, for trimming the white sides of extracted tag quads", 15.0, 0.0, 30.0)

gen.add("maxQuadsToScan", int_t, 0, "Maximum number of largest quads to scan for tags", 10, 1, 100)

gen.add("phaseVarWeightR", double_t, 0, "Weight for phase variance predictor: XY radius from center of camera (m)", 0, 0, 180*180)
gen.add("phaseVarWeightZ", double_t, 0, "Weight for phase variance predictor: Z distance from center of camera (m)", 0, 0, 180*180)
gen.add("phaseVarWeightAngle", double_t, 0, "Weight for phase variance predictor: angle between tag's normal and camera's ray (deg)", 0, 0, 180*180)
gen.add("phaseVarWeightFreq", double_t, 0, "Weight for phase variance predictor: frequency of encoded phase", 0, 0, 180*180)
gen.add("phaseVarWeightBias", double_t, 0, "Weight for phase variance predictor: constant bias", 10*10, 0, 180*180)

gen.add("markerWidthM", double_t, 0, "Physical width (m) of physical markers", 0.07, 0.0001, 100.0)

gen.add("numberOfParticles", int_t, 0, "Number of particles", 100, 1, 1000)
gen.add("position_std", double_t, 0, "Position STD", 0.15, 0.01, 1.0)
gen.add("orientation_std", double_t, 0, "Orientation STD", 0.15, 0.01, 2.0)
gen.add("position_noise_std", double_t, 0, "Position noise STD", 0.15, 0.0, 1.0)
gen.add("orientation_noise_std", double_t, 0, "Orientation noise STD", 0.15, 0.0, 0.5)
gen.add("velocity_noise_std", double_t, 0, "Orientation noise STD", 0.05, 0.0, 0.5)
gen.add("acceleration_noise_std", double_t, 0, "Orientation noise STD", 0.01, 0.0, 0.5)
gen.add("run_id", int_t, 0, "ID of run", 9999, 0, 9999)

exit(gen.generate(PACKAGE, "ftag2", "CamTestbench"))
